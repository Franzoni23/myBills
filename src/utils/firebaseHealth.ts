import { db } from '../firebase';
import { collection, doc, setDoc, getDoc, deleteDoc } from 'firebase/firestore';

/**
 * Fun√ß√£o para verificar a sa√∫de da conex√£o com o Firebase
 * Testa opera√ß√µes b√°sicas de CRUD
 */
export async function checkFirebaseHealth(): Promise<boolean> {
  try {
    console.log('üîç Verificando conectividade com Firebase...');
    
    const testDocId = 'health-check-' + Date.now();
    const testCollection = collection(db, 'health-test');
    const testDocRef = doc(testCollection, testDocId);
    
    // Teste 1: Criar documento
    console.log('üìù Testando cria√ß√£o de documento...');
    await setDoc(testDocRef, {
      timestamp: new Date().toISOString(),
      test: 'health-check',
      status: 'testing'
    });
    console.log('‚úÖ Documento criado com sucesso');
    
    // Teste 2: Ler documento
    console.log('üìñ Testando leitura de documento...');
    const docSnap = await getDoc(testDocRef);
    if (docSnap.exists()) {
      console.log('‚úÖ Documento lido com sucesso:', docSnap.data());
    } else {
      throw new Error('Documento n√£o encontrado ap√≥s cria√ß√£o');
    }
    
    // Teste 3: Deletar documento
    console.log('üóëÔ∏è Testando exclus√£o de documento...');
    await deleteDoc(testDocRef);
    console.log('‚úÖ Documento deletado com sucesso');
    
    // Verificar se foi realmente deletado
    const deletedDocSnap = await getDoc(testDocRef);
    if (!deletedDocSnap.exists()) {
      console.log('‚úÖ Confirmado: documento foi removido');
    } else {
      throw new Error('Documento ainda existe ap√≥s exclus√£o');
    }
    
    console.log('üéâ Todos os testes de conectividade passaram!');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o de sa√∫de do Firebase:', error);
    
    // Diagn√≥stico adicional
    if (error instanceof Error) {
      if (error.message.includes('permission-denied')) {
        console.error('üö´ Erro de permiss√£o: Verifique as regras do Firestore');
      } else if (error.message.includes('unavailable')) {
        console.error('üåê Erro de conectividade: Verifique sua conex√£o com a internet');
      } else if (error.message.includes('not-found')) {
        console.error('üîç Projeto n√£o encontrado: Verifique as configura√ß√µes do Firebase');
      }
    }
    
    return false;
  }
}

/**
 * Fun√ß√£o para verificar as configura√ß√µes do Firebase
 */
export function checkFirebaseConfig(): void {
  console.log('‚öôÔ∏è Verificando configura√ß√µes do Firebase...');
  
  const requiredEnvVars = [
    'VITE_FIREBASE_API_KEY',
    'VITE_FIREBASE_AUTH_DOMAIN',
    'VITE_FIREBASE_PROJECT_ID',
    'VITE_FIREBASE_STORAGE_BUCKET',
    'VITE_FIREBASE_MESSAGING_SENDER_ID',
    'VITE_FIREBASE_APP_ID'
  ];
  
  const missingVars: string[] = [];
  
  requiredEnvVars.forEach(varName => {
    const value = import.meta.env[varName];
    if (!value || value === 'your_' + varName.toLowerCase().replace('vite_firebase_', '')) {
      missingVars.push(varName);
    } else {
      console.log(`‚úÖ ${varName}: Configurado`);
    }
  });
  
  if (missingVars.length > 0) {
    console.error('‚ùå Vari√°veis de ambiente n√£o configuradas:');
    missingVars.forEach(varName => {
      console.error(`   - ${varName}`);
    });
    console.error('\nüí° Dica: Copie .env.example para .env e configure as vari√°veis');
  } else {
    console.log('‚úÖ Todas as vari√°veis de ambiente est√£o configuradas');
  }
}